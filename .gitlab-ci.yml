---

.common:
  before_script:
    - apt-get update -yqq
    - >
      apt-get install -yqq --no-install-recommends
      libclang-dev
      protobuf-compiler
    - rustup update
    - rustup toolchain install ${RUSTUP_TOOLCHAIN}
    - rustup target add wasm32-unknown-unknown --toolchain ${RUSTUP_TOOLCHAIN}-x86_64-unknown-linux-gnu
    - rustup component add rust-src --toolchain ${RUSTUP_TOOLCHAIN}-x86_64-unknown-linux-gnu
    - rustup default ${RUSTUP_TOOLCHAIN}
    - rustup show
    - cargo --version
  deploy_network_before_script:
    - dnf update --assumeyes --quiet
    - >
      dnf install --assumeyes --quiet
      jq
      python3-pip
      rsync
      ssh
    - pip install yq
  deploy_network_script:
    - |
      #export target_ips=( $(yq --raw-output --arg network ${network} '[.[] | select(.network == $network) | .node[].ip] | join(" ")' .ci/networks.yml) )
      export reset_on_deploy=$(yq --raw-output --arg network ${network} '.[] | select(.network == $network) | ."reset-on-deploy"' .ci/networks.yml)
    - |
      for ip in ${target_ips}; do
        ${ssh_command} resonance@${ip} '
          if systemctl is-active --quiet quantus-node.service; then
            if sudo systemctl stop quantus-node.service; then
              echo "$(quantus-node --version | head -n 1) stopped on $(hostname -s)";
            else
              echo "failed to stop $(quantus-node --version | head -n 1) on $(hostname -s)";
            fi;
          else
            echo "inactive $(quantus-node --version | head -n 1) observed on $(hostname -s)";
          fi;
          if systemctl is-active --quiet resonance-miner.service; then
            if sudo systemctl stop resonance-miner.service; then
              echo "resonance-miner stopped on $(hostname -s)";
            else
              echo "failed to stop resonance-miner on $(hostname -s)";
            fi;
          else
            echo "inactive resonance-miner observed on $(hostname -s)";
          fi;
        ' || true
      done
    - |
      if [ "${reset_on_deploy}" = "true" ]; then
        for ip in ${target_ips}; do
          ${ssh_command} resonance@${ip} '
            if sudo test -d /var/lib/resonance/chains; then
              if sudo rm -rf /var/lib/resonance/chains; then
                echo "/var/lib/resonance/chains deleted on $(hostname -s)";
              else
                echo "failed to delete /var/lib/resonance/chains on $(hostname -s)";
              fi;
            else
              echo "deleted /var/lib/resonance/chains observed on $(hostname -s)";
            fi;
          ' || true
        done
      else
        echo "reset_on_deploy: ${reset_on_deploy}, chain db reset skipped.";
      fi
    - |
      for ip in ${target_ips}; do
        if rsync --archive --compress --rsync-path='sudo rsync' --rsh "${ssh_command}" ./resonance-miner resonance@${ip}:/usr/local/bin/resonance-miner; then
          echo "resonance-miner deployed to ${ip}"
        else
          echo "failed to deploy resonance-miner to ${ip}"
        fi
        ${ssh_command} resonance@${ip} '
          if sudo systemctl start resonance-miner.service; then
            echo "resonance-miner started on $(hostname -s)";
          fi;
        ' || true
        if rsync --archive --compress --rsync-path='sudo rsync' --rsh "${ssh_command}" ./quantus-node resonance@${ip}:/usr/local/bin/quantus-node; then
          echo "$(./quantus-node --version | head -n 1) deployed to ${ip}"
        else
          echo "failed to deploy $(./quantus-node --version | head -n 1) to ${ip}"
        fi
        ${ssh_command} resonance@${ip} '
          if sudo systemctl start quantus-node.service; then
            echo "$(quantus-node --version | head -n 1) started on $(hostname -s)";
          fi;
        ' || true
      done
    - |
      sleep 30
      unset all_nodes_found_peers
      for ip in ${target_ips}; do
        health_response=$(curl --silent --url http://${ip}:9944/health 2> /dev/null)
        peer_count=$(echo ${health_response} | jq -r .peers 2> /dev/null)
        if [[ ${health_response} =~ "peers" ]] && (( peer_count > 0 )); then
          echo "node at ${ip} has: ${peer_count} peer(s)";
        else
          all_nodes_found_peers="false"
          echo "node at ${ip} has health response: ${health_response}";
        fi
      done
      if [ "${all_nodes_found_peers}" = "false" ]; then
        exit 1
      fi

variables:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Cdebug-assertions=y
  RUSTUP_TOOLCHAIN: nightly-2024-12-14
  ssh_command: ssh -o IdentityFile=/root/.ssh/id_ed25519 -o IdentitiesOnly=yes -o StrictHostKeyChecking=accept-new
  PIP_ROOT_USER_ACTION: ignore
  FF_SCRIPT_SECTIONS: "true"

compile:
  stage: build
  tags: [ ci, ubuntu ]
  image: rust:latest
  before_script:
    - !reference [ .common, before_script ]
  script:
    - rustup override set ${RUSTUP_TOOLCHAIN}
    - cargo build --locked --release
  after_script:
    - mv target/release/external-miner ./resonance-miner
    - sha256sum ./resonance-miner | cut -d ' ' -f 1 | tee ./resonance-miner.sha256
    - mv target/release/quantus-node ./quantus-node
    - sha256sum ./quantus-node | cut -d ' ' -f 1 | tee ./quantus-node.sha256
    - mv target/release/wbuild/quantus-runtime/quantus_runtime.compact.compressed.wasm ./quantus_runtime.compact.compressed.wasm
    - sha256sum ./quantus_runtime.compact.compressed.wasm | cut -d ' ' -f 1 | tee ./quantus_runtime.compact.compressed.wasm.sha256
  artifacts:
    paths:
      - resonance-miner
      - resonance-miner.sha256
      - quantus-node
      - quantus-node.sha256
      - quantus_runtime.compact.compressed.wasm
      - quantus_runtime.compact.compressed.wasm.sha256

test:
  stage: test
  tags: [ ci, ubuntu ]
  image: rust:latest
  dependencies:
    - compile
  before_script:
    - !reference [ .common, before_script ]
  script:
    - rustup override set ${RUSTUP_TOOLCHAIN}
    - cargo test --locked --release --workspace

deploy-integration-testnet:
  stage: deploy
  dependencies:
    - compile
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  tags: [ fedora, infra ]
  image: fedora:latest
  variables:
    network: integration-testnet
    target_ips: 10.9.1.104 10.9.1.105 10.9.1.215
  before_script:
    - !reference [ .common, deploy_network_before_script ]
  script:
    - !reference [ .common, deploy_network_script ]

deploy-live-testnet:
  stage: deploy
  dependencies:
    - compile
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  tags: [ fedora, infra ]
  image: fedora:latest
  variables:
    network: live-testnet
    target_ips: 10.9.1.201 10.9.1.202 10.9.1.203
  before_script:
    - !reference [ .common, deploy_network_before_script ]
  script:
    - !reference [ .common, deploy_network_script ]
