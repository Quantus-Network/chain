---
.common
  before_script:
    - apt-get update -yqq
    - >
      apt-get install -yqq --no-install-recommends
      libclang-dev
      protobuf-compiler
    - rustup toolchain install nightly
    - rustup update
    - rustup target add wasm32-unknown-unknown --toolchain nightly-x86_64-unknown-linux-gnu
    - rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
    - rustup show
    - cargo --version

variables:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Cdebug-assertions=y

compile:
  stage: build
  tags: [rust, ubuntu]
  image: rust:latest
  before_script:
    - !reference [.common, before_script]
  script:
    - cargo +nightly build --locked --release --verbose
  artifacts:
    untracked: true
    paths:
      - target/
    expire_in: 1 hour

test:
  stage: test
  tags: [rust, ubuntu]
  image: rust:latest
  dependencies:
    - compile
  before_script:
    - !reference [.common, before_script]
  script:
    - cargo +nightly test --locked --release --verbose
  after_script:
    - mv target/release/resonance-node ./resonance
    - sha256sum ./resonance | cut -d ' ' -f 1 | tee ./resonance.sha256
    - mv target/release/wbuild/resonance-runtime/resonance_runtime.compact.compressed.wasm ./resonance_runtime.compact.compressed.wasm
    - sha256sum ./resonance_runtime.compact.compressed.wasm | cut -d ' ' -f 1 | tee ./resonance_runtime.compact.compressed.wasm.sha256
  artifacts:
    paths:
      - resonance
      - resonance.sha256
      - resonance_runtime.compact.compressed.wasm
      - resonance_runtime.compact.compressed.wasm.sha256

testnet:
  stage: deploy
  dependencies:
    - test
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  tags: [fedora, infra]
  image: fedora:latest
  variables:
    ssh_command: ssh -o IdentityFile=/root/.ssh/id_ed25519 -o IdentitiesOnly=yes
    target_ips: 10.9.1.104 10.9.1.105 10.9.1.215
  before_script:
    - dnf update --assumeyes --quiet
    - dnf install --assumeyes --quiet rsync ssh
  script:
    - |
      for ip in ${target_ips}; do
        ${ssh_command} resonance@${ip} '
          if systemctl is-active --quiet resonance.service; then
            if sudo systemctl stop resonance.service; then
              echo "$(resonance --version | head -n 1) stopped on $(hostname -s)";
            else
              echo "failed to stop $(resonance --version | head -n 1) on $(hostname -s)";
            fi;
          else
            echo "inactive $(resonance --version | head -n 1) observed on $(hostname -s)";
          fi;
          if sudo test -d /var/lib/resonance/chains; then
            if sudo rm -rf /var/lib/resonance/chains; then
              echo "/var/lib/resonance/chains deleted on $(hostname -s)";
            else
              echo "failed to delete /var/lib/resonance/chains on $(hostname -s)";
            fi;
          else
            echo "deleted /var/lib/resonance/chains observed on $(hostname -s)";
          fi;
        ' || true
      done
    - |
      for ip in ${target_ips}; do
        if rsync --archive --compress --rsync-path='sudo rsync' --rsh "${ssh_command}" ./resonance resonance@${ip}:/usr/local/bin/resonance; then
          echo "$(./resonance --version | head -n 1) deployed to ${ip}"
        else
          echo "failed to deploy $(./resonance --version | head -n 1) to ${ip}"
        fi
        ${ssh_command} resonance@${ip} '
          if sudo systemctl start resonance.service; then
            echo "$(resonance --version | head -n 1) started on $(hostname -s)";
          fi;
        ' || true
      done
    - |
      for ip in ${target_ips}; do
        ${ssh_command} resonance@${ip} 'journalctl _SYSTEMD_INVOCATION_ID=$(systemctl show --value -p InvocationID resonance.service) && systemctl status --no-pager resonance.service' || true
      done
