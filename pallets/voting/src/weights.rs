//! Autogenerated weights for pallet_voting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-01, STEPS: `1`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//!
//! MANUALLY EDITED

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_voting.
pub trait WeightInfo {
    fn register_proposal() -> Weight;
    fn vote() -> Weight;
}

/// Weights for pallet_voting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn register_proposal() -> Weight {
        Weight::from_parts(10_000, 0)
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn vote() -> Weight {
        Weight::from_parts(10_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn register_proposal() -> Weight {
        Weight::from_parts(10_000, 0)
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    fn vote() -> Weight {
        Weight::from_parts(10_000, 0)
            .saturating_add(RocksDbWeight::get().reads(2))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
} 